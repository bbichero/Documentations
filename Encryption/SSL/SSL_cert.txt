########################  SSL Cert  ########################

# Tuto : https://jamielinux.com/docs/openssl-certificate-authority/create-the-root-pair.html

# Go to /root and create directory structure for all SSL cert
mkdir /root/ca
cd /root/ca
mkdir certs crl newcerts private
chmod 700 private
touch index.txt
echo 1000 > serial

# Copy the root CA configuration from https://jamielinux.com/docs/openssl-certificate-authority/appendix/root-configuration-file.html
# in /root/ca/openssl.cnf

# Create the root key
cd /root/ca
openssl genrsa -aes256 -out private/ca.key.pem 4096
chmod 400 private/ca.key.pem

# Create root certificate
cd /root/ca
openssl req -config openssl.cnf \
      -key private/ca.key.pem \
      -new -x509 -days 7300 -sha256 -extensions v3_ca \
      -out certs/ca.cert.pem
      
chmod 444 certs/ca.cert.pem

# Verify the root certificate
openssl x509 -noout -text -in certs/ca.cert.pem

## Create the intermediate pair

# Prepare the directory
mkdir /root/ca/intermediate
cd /root/ca/intermediate
mkdir certs crl csr newcerts private
chmod 700 private
touch index.txt
echo 1000 > serial

# crlnumber is used to keep track of certificate revocation lists
echo 1000 > /root/ca/intermediate/crlnumber

# Create the Intermediate private key
openssl genrsa -aes256 \
      -out intermediate/private/intermediate.key.pem 4096

chmod 400 intermediate/private/intermediate.key.pem

# Copy the root CA configuration from https://jamielinux.com/docs/openssl-certificate-authority/appendix/intermediate-configuration-file.html
# in /root/ca/intermediate/openssl.cnf

# Create certificate signing request (CSR)
openssl req -config intermediate/openssl.cnf -new -sha256 \
      -key intermediate/private/intermediate.key.pem \
      -out intermediate/csr/intermediate.csr.pem
      
# Create intermediate certificate
openssl ca -config openssl.cnf -extensions v3_intermediate_ca \
      -days 3650 -notext -md sha256 \
      -in intermediate/csr/intermediate.csr.pem \
      -out intermediate/certs/intermediate.cert.pem

chmod 444 intermediate/certs/intermediate.cert.pem

# Verify the intermediate certificate
openssl x509 -noout -text \
      -in intermediate/certs/intermediate.cert.pem
      
# Verify the intermediate certificate against the root certificate
openssl verify -CAfile certs/ca.cert.pem \
      intermediate/certs/intermediate.cert.pem
      
# Create the certificate chain file
cat intermediate/certs/intermediate.cert.pem \
      certs/ca.cert.pem > intermediate/certs/ca-chain.cert.pem

chmod 444 intermediate/certs/ca-chain.cert.pem

###  Sign server and client certificates for Apache, dovecot, etc ...

# Create private key
cd /root/ca
openssl genrsa -aes256 \
      -out intermediate/private/www.example.com.key.pem 2048

chmod 400 intermediate/private/www.example.com.key.pem

# Create certificate signing request (CSR)
openssl req -config intermediate/openssl.cnf \
      -key intermediate/private/www.example.com.key.pem \
      -new -sha256 -out intermediate/csr/www.example.com.csr.pem

# Create certificate cert
openssl ca -config intermediate/openssl.cnf \
      -extensions server_cert -days 375 -notext -md sha256 \
      -in intermediate/csr/www.example.com.csr.pem \
      -out intermediate/certs/www.example.com.cert.pem

chmod 444 intermediate/certs/www.example.com.cert.pem

# Verify the certificate
openssl x509 -noout -text \
      -in intermediate/certs/www.example.com.cert.pem
      
# Verifiy the chain of trust with the ca-chain.cert.pem
openssl verify -CAfile intermediate/certs/ca-chain.cert.pem \
      intermediate/certs/www.example.com.cert.pem
      
# Certs are ready :

ca-chain.cert.pem
www.example.com.key.pem
www.example.com.cert.pem
